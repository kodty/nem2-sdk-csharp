using io.nem2.sdk.src.Infrastructure.HttpRepositories;
using System.Reactive.Linq;

namespace Integration_Tests.HttpRequests
{
    internal class MetadataRequests
    {
        [SetUp]
        public void Setup()
        {
        }

        [Test, Timeout(20000)]
        public async Task SearchMetadata()
        {
            var client = new MetadataHttp(HttpSetUp.Node, HttpSetUp.Port);

            var queryModel = new QueryModel();
            queryModel.SetParam(QueryModel.DefinedParams.pageNumber, 2);

            var response = await client.SearchMetadataEntries(queryModel);

            Assert.That(response[0].MetadataEntry.Version, Is.EqualTo(1));
            Assert.That(response[0].MetadataEntry.ValueSize, Is.EqualTo(6));
            Assert.That(response[0].MetadataEntry.CompositeHash, Is.EqualTo("878ABDD6BA8A311255A6D9967C93BA4957414709CF763CA0BB5A78A47108052F"));
            Assert.That(response[0].MetadataEntry.SourceAddress, Is.EqualTo("682F70FA28E167702898EFDFCCA9B808304B86A22117A86F"));
            Assert.That(response[0].MetadataEntry.TargetAddress, Is.EqualTo("68FAF5ACB04257242865BBC5D1C712E7538ECC92930660B3"));
            Assert.That(response[0].MetadataEntry.ScopedMetadataKey, Is.EqualTo("BCCC2EE01677A923"));
            Assert.That(response[0].MetadataEntry.TargetId, Is.EqualTo("0000000000000000"));
            Assert.That(response[0].MetadataEntry.Value, Is.EqualTo("323632313738"));
        }

        [Test, Timeout(20000)]
        public async Task GetMetadata()
        {
            var client = new MetadataHttp(HttpSetUp.Node, HttpSetUp.Port);

            var response = await client.GetMetadata("878ABDD6BA8A311255A6D9967C93BA4957414709CF763CA0BB5A78A47108052F");


            Assert.That(response.MetadataEntry.Version, Is.EqualTo(1));
            Assert.That(response.MetadataEntry.ValueSize, Is.EqualTo(6));
            Assert.That(response.MetadataEntry.CompositeHash, Is.EqualTo("878ABDD6BA8A311255A6D9967C93BA4957414709CF763CA0BB5A78A47108052F"));
            Assert.That(response.MetadataEntry.SourceAddress, Is.EqualTo("682F70FA28E167702898EFDFCCA9B808304B86A22117A86F"));
            Assert.That(response.MetadataEntry.TargetAddress, Is.EqualTo("68FAF5ACB04257242865BBC5D1C712E7538ECC92930660B3"));
            Assert.That(response.MetadataEntry.ScopedMetadataKey, Is.EqualTo("BCCC2EE01677A923"));
            Assert.That(response.MetadataEntry.TargetId, Is.EqualTo("0000000000000000"));
            Assert.That(response.MetadataEntry.MetadataType, Is.EqualTo(0));
            Assert.That(response.MetadataEntry.Value, Is.EqualTo("323632313738"));
        }

        [Test, Timeout(20000)]
        public async Task GetMetadataMerkle()
        {
            var client = new MetadataHttp(HttpSetUp.Node, HttpSetUp.Port);

            var response = await client.GetMetadataMerkle("878ABDD6BA8A311255A6D9967C93BA4957414709CF763CA0BB5A78A47108052F");

            Assert.That(response.Tree[0].Links[0].Link, Is.EqualTo("D2AF74F3F4D321822C5E6125D8E2130E8B23EE13B4E7050182811D45358524B2"));
            Assert.That(response.Raw, Is.EqualTo("0000FFFFD2AF74F3F4D321822C5E6125D8E2130E8B23EE13B4E7050182811D45358524B2C651B5492EF45C1378008F7E674646B34907A4CF6AB767B6F2CB924401D2A6DEB3F82AC90B7B84F16AE7D0152D107786F848F9A1175E40C8A4A9E391B9D0FFF449CFE848AAF4C97B16D0BB7EACDD4771A21F6053DEAD4824D7B3A3596FA109DF30E13F4CAA659A1B19778418BB0D2258C10A83D3B3C8161CE0185F15E2CDDD2C428600FE0614FD768BFFE0AB8B6F7737A698DB200F7730EBC16A5D33BE4F5F46A45978EC98D8AF45127E3929A2A2FE4386547ADB8CE8AC8448F5BA67F7938C6C9C388CF637981F559F9F588121C37CFEF7DDB20F0A4138F87AEDC7302723FB896DB0CF7CAFE09BC36CCA79EE80975D34E2D769CB1563941BD26463B2E9894B1DBA2B39C018EF72CD2D16BC27C433CEEB93A44E3414A08B75AC944308E39F925D9FD615D3A60F819BCC9DB8CC56E251B2A655DA443C5AC0E1CCF35A68624B4A5ED5EE922B05880124BCFD6C0DF23335BF57043D8847D240721CE6565CE87FC64D8583B4AC62C479ADA434F8CAE51015F74D8E1C6A7FCFC70265714DB863B79F5EC692BF6700D60E8329C6ADF842F3CE0C3690E7EC842CBBA04EEB9D3C1B5F7E3A7B155B9F3B3A049FC6BCF8D20CE23F68AB1223AAED7770A873E756B039582149C820C39911D5DDFDF5EA2C71A3C42CCE9771A3B77B8F64C16811F0D48E6496C30000FFFF2CE4361E1036EB9B48DFA7D3FA3AC53009B8FBA8A0725262498E40187FA1B534E3ADB514603032CA47835A6A3D65FEABE634DE450A8671B6A05FE2B3F41517C510CD32C0C19FA92F2379DC74363BBAC4840A9E71B43C097074A0C27AA6D540AD8FBADCA5063FC336D32C7BEBA3E650D1DA6D2783D25625C16AB2326F01B7BE55284BF332658B7349A9E9EC6C2398C22781ABD9DD02C2AB8C3583BA0469DF6DD07CE5698B92D1B3554F1A0C10136DE10194B35E299B40EDF43F96DD766B44FF4FD527A6227DCE19801FA7C3995A5F2867BB4CEB45EB10EAEB98D818CEFD0D3C2DAECAAA1BE5CAE09BC1503580EA578098DD2D278331075B588791A5B3CEBE68E7A3FFAFA325EB5AD937CDF77C2D758922EEDBD53DD4020B77C46B3D361F1C868FCE5CA2ABE82F3679545033676D302EB887E87B5CDBAD6EA31FB2CDB5030196884837F953DE83247182EC3AA983437180F398E1E409EE60D1B5256A9D9A7EE4633EAE4AC85945ADB44F24046F9876CF6E5813B6DE8829979CBB98E3E15E8DB5A044CFD307AB2EBAAF0B7ABCB3FAF96D3391962AB9A28609D1C33B05A45913AD91A46C5073A6DAE36A9D8E63230701E258DD647B7BC1B53A087C3A20F2592E2F500D89C87E5C3821E95A370D2427103CE3C3228C56875FF23699008DA70C017C5B087611C1436B9961871D2D1D4B895161D08E2880B2287BC8F9643EF6CA867F2C0000FFFF1E4B380FF5EA72630E9C3D8FC531F13B5AE691503C4F80627AA5691D4E851C68B9E17245E871F844F9DABCD882C57018E187FD08B163F1CCC7AD55364B6C52500D2A6D3E1E51032A07FA60A2E03ABDE95D7460D4DBDCFC54A8BA61B19CA8A5F082E4E788C98585E3F0C68AEA227D2C86290A79E542B1D01B12E494777A1A8B8D8E8552D6FBAB389A5DAE8CFE3DD0CCF822ACEE2DFEBDFF3A1E692B458C5CBF6D3FC2DDBF51BAE93050C3F2E46ED6DDB56FC62B3CEE1B08096B8C5773380A433E2E1ACB3BDF07D6AA36EC34A3943882DB0A012AD85E747C56EA2F1E11161AC04B69CBB6D77F38F6091E3B378ABAAF3253F35B889A393A03EBCD116D037D6D691290184694F11EF89A9708572C715CBAA4406E2342A7631466445FDF4437A929A8186F907C5B8CF2ABDB380D2FCBD293D7E756F7BBF99D3FCFE946D66CC3DB6B12941B82D01C79D85CEF88D3C5155FA2ABE7AF5C0B95C853A2330D6A9E8A2A01C6A768F94FF741417DCC32D8375793FA91976C3CF542115B790B14E6A09AB4C8C215D492874BCEB50EACD34B882CB17B57AE9B7FB3342C95C897FD82EDD57A00E64EC29A93F370BEE28C7468B0934D69B9F6ABC6EC65DC8681638A68FB6C03EEACF566952D1234507143D6BEE456A17F90E90D4B9B9A57BC6AA0A3C84125CF4A74F029081A212AF19DB0369B02D3B7E88CA3DD0F662FB891C8690701793CF3F4F70000FF4E753FF218B46B181D5C78672D5B5E04902C43300D260CED9596FBF99FCBE8C5E711B4D0F13E736518FFB9CF494F80E8F9C09D6E80F7D8330336911B3DF3FFE0609FBCFDD8A4C1AA809C63119A0C3FF31DE2186D39A2FCBD263ECCA4FFDCFD2DC4E42F56279A4D9EAD49251BEAD01D8890A34543F303E6F21CEC535F8567061F5277E3DB60435EBDD8A555E26765693E2F9E8C7CBD3FBE6382C3AC46566C31CA90EB11AF8B15A04CB9B0DE9D0C346953F3DA890F605632786EFB0C2DFB55417A49E618C2632C3C3B44A2EF377581815FB175E4654E7BD553ED932CEEDF4FD61F6705D32D21E6C519DE8DC16B26994C30C67870E0D518F28AD1CE1AFBFFE1CCC4F924874D22181F7B390BD1F5E7164B75F43338FDF208CA31CBB2531581F2FAE007799E1A0432489DF6A0A396F2A2EABE96C3D0A53857BF1EFD456BDCE4910529BAB779304CAD06F99238B23865868C0787180AA8815B90EEF6A90C9E853ED7A9323AE532BB12626DDEB9E3CF5FFFF833B67C3184643545E4FD87CD8FD948D8C61400000900EB3514FC154D9AF6546E7B9BF991BCDB17F7F96633F4E25F15CA6E2820600C922349676F50607521FC7872A3AE3512A67F7C92B220CB3224EBB2A9C7A2CBBB1BFF3BF4E1D9C8AD501CBD167B5C0A686973C5A7E1CA6ADE42923AF9AF0EEA6510F4094970BE9C66F4A328AFD8EAA5474E7DAE50B6B09BB558319EEC20614AD7D8"));
            Assert.That(response.Tree[0].Type, Is.EqualTo(0));
            Assert.That(response.Tree[0].NibbleCount, Is.EqualTo(0));
            Assert.That(response.Tree[0].Value, Is.Null);
            Assert.That(response.Tree[0].BranchHash, Is.EqualTo("AE4CD37231D5BBACD6DC62E4BE9A597FD8518054750A87B3DCED5D4088537081"));
        }
    }
}
