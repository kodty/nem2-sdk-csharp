using io.nem2.sdk.src.Infrastructure.HttpRepositories;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reactive.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Integration_Tests
{
    internal class MetadataRequests
    {
        [SetUp]
        public void Setup()
        {
        }

        [Test, Timeout(20000)]
        public async Task SearchMetadata()
        {
            var metadataHttp = new MetadataHttp("75.119.150.108", 3000);

            var queryModel = new QueryModel();
            queryModel.SetParam(QueryModel.DefinedParams.pageNumber, 2);

            var response = await metadataHttp.SearchMetadataEntries(queryModel);

            Assert.That(response.Data[0].Id, Is.EqualTo("6644F471079630C933A7A6E0"));
            Assert.That(response.Data[0].MetadataEntry.Version, Is.EqualTo(1));
            Assert.That(response.Data[0].MetadataEntry.ValueSize, Is.EqualTo(6));
            Assert.That(response.Data[0].MetadataEntry.CompositeHash, Is.EqualTo("878ABDD6BA8A311255A6D9967C93BA4957414709CF763CA0BB5A78A47108052F"));
            Assert.That(response.Data[0].MetadataEntry.SourceAddress, Is.EqualTo("682F70FA28E167702898EFDFCCA9B808304B86A22117A86F"));
            Assert.That(response.Data[0].MetadataEntry.TargetAddress, Is.EqualTo("68FAF5ACB04257242865BBC5D1C712E7538ECC92930660B3"));
            Assert.That(response.Data[0].MetadataEntry.ScopedMetadataKey, Is.EqualTo("BCCC2EE01677A923"));
            Assert.That(response.Data[0].MetadataEntry.TargetId, Is.EqualTo("0000000000000000"));
            Assert.That(response.Data[0].MetadataEntry.Value, Is.EqualTo("323632313738"));
        }

        [Test, Timeout(20000)]
        public async Task GetMetadata()
        {
            var metadataHttp = new MetadataHttp("75.119.150.108", 3000);

            var response = await metadataHttp.GetMetadata("878ABDD6BA8A311255A6D9967C93BA4957414709CF763CA0BB5A78A47108052F");

            Assert.That(response.Id, Is.EqualTo("6644F471079630C933A7A6E0"));
            Assert.That(response.MetadataEntry.Version, Is.EqualTo(1));
            Assert.That(response.MetadataEntry.ValueSize, Is.EqualTo(6));
            Assert.That(response.MetadataEntry.CompositeHash, Is.EqualTo("878ABDD6BA8A311255A6D9967C93BA4957414709CF763CA0BB5A78A47108052F"));
            Assert.That(response.MetadataEntry.SourceAddress, Is.EqualTo("682F70FA28E167702898EFDFCCA9B808304B86A22117A86F"));
            Assert.That(response.MetadataEntry.TargetAddress, Is.EqualTo("68FAF5ACB04257242865BBC5D1C712E7538ECC92930660B3"));
            Assert.That(response.MetadataEntry.ScopedMetadataKey, Is.EqualTo("BCCC2EE01677A923"));
            Assert.That(response.MetadataEntry.TargetId, Is.EqualTo("0000000000000000"));
            Assert.That(response.MetadataEntry.Value, Is.EqualTo("323632313738"));
        }

        [Test, Timeout(20000)]
        public async Task GetMetadataMerkle()
        {
            var metadataHttp = new MetadataHttp("75.119.150.108", 3000);

            var response = await metadataHttp.GetMetadataMerkle("878ABDD6BA8A311255A6D9967C93BA4957414709CF763CA0BB5A78A47108052F");

            Assert.That(response.Raw, Is.EqualTo("0000FFFF4AE3DCBE2E514E983502DCC35D4CADE88937DA6A124FE4BB70D210956444BAB3E42BB70C2B734419BBE6149C1CFD93FC40E3EB1C8D364B4B9F4D6C97061084DED5C4C566C3DEBF5D9556E1DFF88B44909941A881336DE130F8D710CED2FF0C50AF9E177B126C33033E521772114E5E523373E6BEBD4DCAA3647ED8273D5667998865FDC43236C19DBEECBA0EAEBB1E12BF7820C29F8325587A1126358B09E7DE3D4375A996057DEF3483A6B27847608CB34D2589974A025AAB3BB33313902DEF74A5C6F2ACD9D783A4A79EC3E8700E654C84292202AAE0CE00D158910630DE634F1E404A9434B04A615ADD16C97C4C2DBC31228DAA02DD9CB1B5F58D4427762A4864CBA8F7CE735D8A5E88D8BEF13B4DFA36C3D794A37C0217D76AE4D9BC93C4DE1E968EFAC0EFCAB3216FE87FACA030493DDB6D5DE09B35501A04FCC631D4D016840A6851E459A03B491CC4E47FADEF847EF4A9B05B97361DBCF6965A092ABD87DD54C15C06984AC527E28D79F438200F66B2EBEBD0F4BCDC6701A5E95B1535DCA678CF5CDEDCC5A6DD15F3D9757D7F17C71D27E8CD362D55C778439B7D5FAC418D6764B67C10A981F4CCA1C36E6AA0D1F0A98F9FDD2CF108858A1B53807E67D60BC096E93761F13E795CB971A7E9AE364ED8244A09B3FAE86BDB9808858CFB98D2FE086D287633C270C42F20A6D53259F3E22CA88102697A7DEED3B3D311310000FFFF3A8B73D713A6BE81607E52BF2E56F847E6E710316A3041578226B40C2C4BAD283D8E143AC6F2EE1D78112509CB9147F842E8A0F616BD4CC7242AC2B5A3DFB9342FD6398841BA59B01007C968025F80FC0A53CD0909835CC4E49D9C9CEA79FBA7BAAE747D5B26A1702D64052E66E29896CEE3D5A91E62F64D4A2909B65B69AAA7EA4D6CCA648E64AA86426FC8694470B4577B5AE532F4CC8B1E2AD883CF6F42081EB701706A29C5AE216D36B0CD2D0AE51E3A812DB68A2BA2D5EC2349575680DC567EDCC32E3455BB7ADD2EB3753B0B74BB4AEEEBA4B1FCFE18EADE0B762BB6BF57235C0F5FADD9685D4F620BB084E26ABA62807BD76B869E414535D7EB7A30694C783CAC2314576DD82F09FABB7E614AD0925BF36DF42A070A98A1129C29A80AF04579A7B0364E5772A0F50EEA8FFCB35D5148762DA0FE2F4779F088C626A842E45803FF9FFFF199E6098479F4CF6FE077323A79BD3C837A9982AC1FCB3A88D91257FFBA38C2BBF83F58475932CCE55B9BF8C42CB3EAAD891B8CF6990EC09051C2D95B69AD3699D067BC0507D9AD0D5CEA832B04EEF2871B43FC32E4425B41FBE6BB94CA34822F153728D842846027232BDDA31411F29BCD073332A5AE818BC333319FC4E4AD3E3D59E7DF0F4F6E4515270C2662A162F4A1299F8007572FC88133FF782263E4478F3A6D6FC4FD14D6277460FBA522264F9F3439BC72E012CB8B0000FFFFAC9F775F41E3C8E44BBEACFA9AA1F7EE62944E597D3C28A31A612B12129EEEE0B9E17245E871F844F9DABCD882C57018E187FD08B163F1CCC7AD55364B6C52500D2A6D3E1E51032A07FA60A2E03ABDE95D7460D4DBDCFC54A8BA61B19CA8A5F082E4E788C98585E3F0C68AEA227D2C86290A79E542B1D01B12E494777A1A8B8D8E8552D6FBAB389A5DAE8CFE3DD0CCF822ACEE2DFEBDFF3A1E692B458C5CBF6D7D55DA5216A2E306DEFCFA1FD1583C6F0B764321AD64409B9D82AD67143280EF2E1ACB3BDF07D6AA36EC34A3943882DB0A012AD85E747C56EA2F1E11161AC04BCF2A723A5DAD58F5552B4AB13DB59D651A7E113A85DB2DE013ECCD68BB0F0F1A90184694F11EF89A9708572C715CBAA4406E2342A7631466445FDF4437A929A8186F907C5B8CF2ABDB380D2FCBD293D7E756F7BBF99D3FCFE946D66CC3DB6B12941B82D01C79D85CEF88D3C5155FA2ABE7AF5C0B95C853A2330D6A9E8A2A01C6A768F94FF741417DCC32D8375793FA91976C3CF542115B790B14E6A09AB4C8C215D492874BCEB50EACD34B882CB17B57AE9B7FB3342C95C897FD82EDD57A00E64EC29A93F370BEE28C7468B0934D69B9F6ABC6EC65DC8681638A68FB6C03EEACD7E8CDD46C3318CB4B4AA1DF7E77C04BC643D77D749E63345CDE83969267AA7B2ABDD84CAA09B07C81FF40C5D26A6ACF57CDF30223238ECAE2205552A012D29C0000FF4E753FF218B46B181D5C78672D5B5E04902C43300D260CED9596FBF99FCBE8C5E711B4D0F13E736518FFB9CF494F80E8F9C09D6E80F7D8330336911B3DF3FFE0609FBCFDD8A4C1AA809C63119A0C3FF31DE2186D39A2FCBD263ECCA4FFDCFD2DC4E42F56279A4D9EAD49251BEAD01D8890A34543F303E6F21CEC535F8567061F5277E3DB60435EBDD8A555E26765693E2F9E8C7CBD3FBE6382C3AC46566C31CA90EB11AF8B15A04CB9B0DE9D0C346953F3DA890F605632786EFB0C2DFB55417A49E618C2632C3C3B44A2EF377581815FB175E4654E7BD553ED932CEEDF4FD61F6705D32D21E6C519DE8DC16B26994C30C67870E0D518F28AD1CE1AFBFFE1CCC4F924874D22181F7B390BD1F5E7164B75F43338FDF208CA31CBB2531581F2FAE007799E1A0432489DF6A0A396F2A2EABE96C3D0A53857BF1EFD456BDCE4910529BAB779304CAD06F99238B23865868C0787180AA8815B90EEF6A90C9E853ED7A9323AE532BB12626DDEB9E3CF5FFFF833B67C3184643545E4FD87CD8FD948D8C61400000900EB3514FC154D9AF6546E7B9BF991BCDB17F7F96633F4E25F15CA6E2820600C922349676F50607521FC7872A3AE3512A67F7C92B220CB3224EBB2A9C7A2CBBB1BFF3BF4E1D9C8AD501CBD167B5C0A686973C5A7E1CA6ADE42923AF9AF0EEA6510F4094970BE9C66F4A328AFD8EAA5474E7DAE50B6B09BB558319EEC20614AD7D8"));
            Assert.That(response.Tree[0].Links[0].Link, Is.EqualTo("4AE3DCBE2E514E983502DCC35D4CADE88937DA6A124FE4BB70D210956444BAB3"));
        }
    }
}
