// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System;
using io.nem2.sdk.src.Infrastructure.Buffers.FlatBuffers;

namespace io.nem2.sdk.Infrastructure.Buffers
{

    internal struct SecretLockTransactionBuffer : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  internal static SecretLockTransactionBuffer GetRootAsSecretLockTransactionBuffer(ByteBuffer _bb) { return GetRootAsSecretLockTransactionBuffer(_bb, new SecretLockTransactionBuffer()); }
  internal static SecretLockTransactionBuffer GetRootAsSecretLockTransactionBuffer(ByteBuffer _bb, SecretLockTransactionBuffer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  internal SecretLockTransactionBuffer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  internal uint Size { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  internal byte Signature(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  internal int SignatureLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  internal ArraySegment<byte>? GetSignatureBytes() { return __p.__vector_as_arraysegment(6); }
  internal byte Signer(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  internal int SignerLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  internal ArraySegment<byte>? GetSignerBytes() { return __p.__vector_as_arraysegment(8); }
  internal ushort Version { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  internal ushort Type { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  internal uint Fee(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  internal int FeeLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  internal ArraySegment<byte>? GetFeeBytes() { return __p.__vector_as_arraysegment(14); }
  internal uint Deadline(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  internal int DeadlineLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  internal ArraySegment<byte>? GetDeadlineBytes() { return __p.__vector_as_arraysegment(16); }
  internal uint MosaicId(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  internal int MosaicIdLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  internal ArraySegment<byte>? GetMosaicIdBytes() { return __p.__vector_as_arraysegment(18); }
  internal uint MosaicAmount(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  internal int MosaicAmountLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  internal ArraySegment<byte>? GetMosaicAmountBytes() { return __p.__vector_as_arraysegment(20); }
  internal uint Duration(int j) { int o = __p.__offset(22); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  internal int DurationLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
  internal ArraySegment<byte>? GetDurationBytes() { return __p.__vector_as_arraysegment(22); }
  internal byte HashAlgorithm { get { int o = __p.__offset(24); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  internal byte Secret(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  internal int SecretLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
  internal ArraySegment<byte>? GetSecretBytes() { return __p.__vector_as_arraysegment(26); }
  internal byte Recipient(int j) { int o = __p.__offset(28); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  internal int RecipientLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
  internal ArraySegment<byte>? GetRecipientBytes() { return __p.__vector_as_arraysegment(28); }

  internal static Offset<SecretLockTransactionBuffer> CreateSecretLockTransactionBuffer(FlatBufferBuilder builder,
      uint size = 0,
      VectorOffset signatureOffset = default(VectorOffset),
      VectorOffset signerOffset = default(VectorOffset),
      ushort version = 0,
      ushort type = 0,
      VectorOffset feeOffset = default(VectorOffset),
      VectorOffset deadlineOffset = default(VectorOffset),
      VectorOffset mosaicIdOffset = default(VectorOffset),
      VectorOffset mosaicAmountOffset = default(VectorOffset),
      VectorOffset durationOffset = default(VectorOffset),
      byte hashAlgorithm = 0,
      VectorOffset secretOffset = default(VectorOffset),
      VectorOffset recipientOffset = default(VectorOffset)) {
    builder.StartObject(13);
    SecretLockTransactionBuffer.AddRecipient(builder, recipientOffset);
    SecretLockTransactionBuffer.AddSecret(builder, secretOffset);
    SecretLockTransactionBuffer.AddDuration(builder, durationOffset);
    SecretLockTransactionBuffer.AddMosaicAmount(builder, mosaicAmountOffset);
    SecretLockTransactionBuffer.AddMosaicId(builder, mosaicIdOffset);
    SecretLockTransactionBuffer.AddDeadline(builder, deadlineOffset);
    SecretLockTransactionBuffer.AddFee(builder, feeOffset);
    SecretLockTransactionBuffer.AddSigner(builder, signerOffset);
    SecretLockTransactionBuffer.AddSignature(builder, signatureOffset);
    SecretLockTransactionBuffer.AddSize(builder, size);
    SecretLockTransactionBuffer.AddType(builder, type);
    SecretLockTransactionBuffer.AddVersion(builder, version);
    SecretLockTransactionBuffer.AddHashAlgorithm(builder, hashAlgorithm);
    return SecretLockTransactionBuffer.EndSecretLockTransactionBuffer(builder);
  }

  internal static void StartSecretLockTransactionBuffer(FlatBufferBuilder builder) { builder.StartObject(13); }
  internal static void AddSize(FlatBufferBuilder builder, uint size) { builder.AddUint(0, size, 0); }
  internal static void AddSignature(FlatBufferBuilder builder, VectorOffset signatureOffset) { builder.AddOffset(1, signatureOffset.Value, 0); }
  internal static VectorOffset CreateSignatureVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  internal static void StartSignatureVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  internal static void AddSigner(FlatBufferBuilder builder, VectorOffset signerOffset) { builder.AddOffset(2, signerOffset.Value, 0); }
  internal static VectorOffset CreateSignerVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  internal static void StartSignerVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  internal static void AddVersion(FlatBufferBuilder builder, ushort version) { builder.AddUshort(3, version, 0); }
  internal static void AddType(FlatBufferBuilder builder, ushort type) { builder.AddUshort(4, type, 0); }
  internal static void AddFee(FlatBufferBuilder builder, VectorOffset feeOffset) { builder.AddOffset(5, feeOffset.Value, 0); }
  internal static VectorOffset CreateFeeVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  internal static void StartFeeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  internal static void AddDeadline(FlatBufferBuilder builder, VectorOffset deadlineOffset) { builder.AddOffset(6, deadlineOffset.Value, 0); }
  internal static VectorOffset CreateDeadlineVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  internal static void StartDeadlineVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  internal static void AddMosaicId(FlatBufferBuilder builder, VectorOffset mosaicIdOffset) { builder.AddOffset(7, mosaicIdOffset.Value, 0); }
  internal static VectorOffset CreateMosaicIdVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  internal static void StartMosaicIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  internal static void AddMosaicAmount(FlatBufferBuilder builder, VectorOffset mosaicAmountOffset) { builder.AddOffset(8, mosaicAmountOffset.Value, 0); }
  internal static VectorOffset CreateMosaicAmountVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  internal static void StartMosaicAmountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  internal static void AddDuration(FlatBufferBuilder builder, VectorOffset durationOffset) { builder.AddOffset(9, durationOffset.Value, 0); }
  internal static VectorOffset CreateDurationVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  internal static void StartDurationVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  internal static void AddHashAlgorithm(FlatBufferBuilder builder, byte hashAlgorithm) { builder.AddByte(10, hashAlgorithm, 0); }
  internal static void AddSecret(FlatBufferBuilder builder, VectorOffset secretOffset) { builder.AddOffset(11, secretOffset.Value, 0); }
  internal static VectorOffset CreateSecretVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  internal static void StartSecretVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  internal static void AddRecipient(FlatBufferBuilder builder, VectorOffset recipientOffset) { builder.AddOffset(12, recipientOffset.Value, 0); }
  internal static VectorOffset CreateRecipientVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  internal static void StartRecipientVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  internal static Offset<SecretLockTransactionBuffer> EndSecretLockTransactionBuffer(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SecretLockTransactionBuffer>(o);
  }
  internal static void FinishSecretLockTransactionBufferBuffer(FlatBufferBuilder builder, Offset<SecretLockTransactionBuffer> offset) { builder.Finish(offset.Value); }
};


}
