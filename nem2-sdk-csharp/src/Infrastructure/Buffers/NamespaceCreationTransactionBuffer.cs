// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System;
using io.nem2.sdk.src.Infrastructure.Buffers.FlatBuffers;

namespace io.nem2.sdk.Infrastructure.Buffers
{
    internal struct NamespaceCreationTransactionBuffer : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  internal static NamespaceCreationTransactionBuffer GetRootAsNamespaceCreationTransactionBuffer(ByteBuffer _bb) { return GetRootAsNamespaceCreationTransactionBuffer(_bb, new NamespaceCreationTransactionBuffer()); }
  internal static NamespaceCreationTransactionBuffer GetRootAsNamespaceCreationTransactionBuffer(ByteBuffer _bb, NamespaceCreationTransactionBuffer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  internal NamespaceCreationTransactionBuffer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  internal uint Size { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  internal byte Signature(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  internal int SignatureLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  internal ArraySegment<byte>? GetSignatureBytes() { return __p.__vector_as_arraysegment(6); }
  internal byte Signer(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  internal int SignerLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  internal ArraySegment<byte>? GetSignerBytes() { return __p.__vector_as_arraysegment(8); }
  internal ushort Version { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  internal ushort Type { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  internal uint Fee(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  internal int FeeLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  internal ArraySegment<byte>? GetFeeBytes() { return __p.__vector_as_arraysegment(14); }
  internal uint Deadline(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  internal int DeadlineLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  internal ArraySegment<byte>? GetDeadlineBytes() { return __p.__vector_as_arraysegment(16); }
  internal byte NamespaceType { get { int o = __p.__offset(18); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  internal uint DurationParentId(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  internal int DurationParentIdLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  internal ArraySegment<byte>? GetDurationParentIdBytes() { return __p.__vector_as_arraysegment(20); }
  internal uint NamespaceId(int j) { int o = __p.__offset(22); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  internal int NamespaceIdLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
  internal ArraySegment<byte>? GetNamespaceIdBytes() { return __p.__vector_as_arraysegment(22); }
  internal byte NamespaceNameSize { get { int o = __p.__offset(24); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  internal byte NamespaceName(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  internal int NamespaceNameLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
  internal ArraySegment<byte>? GetNamespaceNameBytes() { return __p.__vector_as_arraysegment(26); }

  internal static Offset<NamespaceCreationTransactionBuffer> CreateNamespaceCreationTransactionBuffer(FlatBufferBuilder builder,
      uint size = 0,
      VectorOffset signatureOffset = default(VectorOffset),
      VectorOffset signerOffset = default(VectorOffset),
      ushort version = 0,
      ushort type = 0,
      VectorOffset feeOffset = default(VectorOffset),
      VectorOffset deadlineOffset = default(VectorOffset),
      byte namespaceType = 0,
      VectorOffset durationParentIdOffset = default(VectorOffset),
      VectorOffset namespaceIdOffset = default(VectorOffset),
      byte namespaceNameSize = 0,
      VectorOffset namespaceNameOffset = default(VectorOffset)) {
    builder.StartObject(12);
    NamespaceCreationTransactionBuffer.AddNamespaceName(builder, namespaceNameOffset);
    NamespaceCreationTransactionBuffer.AddNamespaceId(builder, namespaceIdOffset);
    NamespaceCreationTransactionBuffer.AddDurationParentId(builder, durationParentIdOffset);
    NamespaceCreationTransactionBuffer.AddDeadline(builder, deadlineOffset);
    NamespaceCreationTransactionBuffer.AddFee(builder, feeOffset);
    NamespaceCreationTransactionBuffer.AddSigner(builder, signerOffset);
    NamespaceCreationTransactionBuffer.AddSignature(builder, signatureOffset);
    NamespaceCreationTransactionBuffer.AddSize(builder, size);
    NamespaceCreationTransactionBuffer.AddType(builder, type);
    NamespaceCreationTransactionBuffer.AddVersion(builder, version);
    NamespaceCreationTransactionBuffer.AddNamespaceNameSize(builder, namespaceNameSize);
    NamespaceCreationTransactionBuffer.AddNamespaceType(builder, namespaceType);
    return NamespaceCreationTransactionBuffer.EndNamespaceCreationTransactionBuffer(builder);
  }

  internal static void StartNamespaceCreationTransactionBuffer(FlatBufferBuilder builder) { builder.StartObject(12); }
  internal static void AddSize(FlatBufferBuilder builder, uint size) { builder.AddUint(0, size, 0); }
  internal static void AddSignature(FlatBufferBuilder builder, VectorOffset signatureOffset) { builder.AddOffset(1, signatureOffset.Value, 0); }
  internal static VectorOffset CreateSignatureVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  internal static void StartSignatureVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  internal static void AddSigner(FlatBufferBuilder builder, VectorOffset signerOffset) { builder.AddOffset(2, signerOffset.Value, 0); }
  internal static VectorOffset CreateSignerVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  internal static void StartSignerVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  internal static void AddVersion(FlatBufferBuilder builder, ushort version) { builder.AddUshort(3, version, 0); }
  internal static void AddType(FlatBufferBuilder builder, ushort type) { builder.AddUshort(4, type, 0); }
  internal static void AddFee(FlatBufferBuilder builder, VectorOffset feeOffset) { builder.AddOffset(5, feeOffset.Value, 0); }
  internal static VectorOffset CreateFeeVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  internal static void StartFeeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  internal static void AddDeadline(FlatBufferBuilder builder, VectorOffset deadlineOffset) { builder.AddOffset(6, deadlineOffset.Value, 0); }
  internal static VectorOffset CreateDeadlineVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  internal static void StartDeadlineVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  internal static void AddNamespaceType(FlatBufferBuilder builder, byte namespaceType) { builder.AddByte(7, namespaceType, 0); }
  internal static void AddDurationParentId(FlatBufferBuilder builder, VectorOffset durationParentIdOffset) { builder.AddOffset(8, durationParentIdOffset.Value, 0); }
  internal static VectorOffset CreateDurationParentIdVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  internal static void StartDurationParentIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  internal static void AddNamespaceId(FlatBufferBuilder builder, VectorOffset namespaceIdOffset) { builder.AddOffset(9, namespaceIdOffset.Value, 0); }
  internal static VectorOffset CreateNamespaceIdVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  internal static void StartNamespaceIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  internal static void AddNamespaceNameSize(FlatBufferBuilder builder, byte namespaceNameSize) { builder.AddByte(10, namespaceNameSize, 0); }
  internal static void AddNamespaceName(FlatBufferBuilder builder, VectorOffset namespaceNameOffset) { builder.AddOffset(11, namespaceNameOffset.Value, 0); }
  internal static VectorOffset CreateNamespaceNameVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  internal static void StartNamespaceNameVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  internal static Offset<NamespaceCreationTransactionBuffer> EndNamespaceCreationTransactionBuffer(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<NamespaceCreationTransactionBuffer>(o);
  }
  internal static void FinishNamespaceCreationTransactionBufferBuffer(FlatBufferBuilder builder, Offset<NamespaceCreationTransactionBuffer> offset) { builder.Finish(offset.Value); }
};


}
