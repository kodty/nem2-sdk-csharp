// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System;
using io.nem2.sdk.src.Infrastructure.Buffers.FlatBuffers;

namespace io.nem2.sdk.Infrastructure.Buffers
{
    internal struct MosaicCreationTransactionBuffer : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  internal static MosaicCreationTransactionBuffer GetRootAsMosaicCreationTransactionBuffer(ByteBuffer _bb) { return GetRootAsMosaicCreationTransactionBuffer(_bb, new MosaicCreationTransactionBuffer()); }
  internal static MosaicCreationTransactionBuffer GetRootAsMosaicCreationTransactionBuffer(ByteBuffer _bb, MosaicCreationTransactionBuffer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  internal MosaicCreationTransactionBuffer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  internal uint Size { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  internal byte Signature(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  internal int SignatureLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  internal ArraySegment<byte>? GetSignatureBytes() { return __p.__vector_as_arraysegment(6); }
  internal byte Signer(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  internal int SignerLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  internal ArraySegment<byte>? GetSignerBytes() { return __p.__vector_as_arraysegment(8); }
  internal ushort Version { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  internal ushort Type { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  internal uint Fee(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  internal int FeeLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  internal ArraySegment<byte>? GetFeeBytes() { return __p.__vector_as_arraysegment(14); }
  internal uint Deadline(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  internal int DeadlineLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  internal ArraySegment<byte>? GetDeadlineBytes() { return __p.__vector_as_arraysegment(16); }
  internal uint ParentId(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  internal int ParentIdLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  internal ArraySegment<byte>? GetParentIdBytes() { return __p.__vector_as_arraysegment(18); }
  internal uint MosaicId(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  internal int MosaicIdLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  internal ArraySegment<byte>? GetMosaicIdBytes() { return __p.__vector_as_arraysegment(20); }
  internal byte NameLength { get { int o = __p.__offset(22); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  internal byte NumOptionalProperties { get { int o = __p.__offset(24); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  internal byte Flags { get { int o = __p.__offset(26); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  internal byte Divisibility { get { int o = __p.__offset(28); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  internal byte MosaicName(int j) { int o = __p.__offset(30); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  internal int MosaicNameLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
  internal ArraySegment<byte>? GetMosaicNameBytes() { return __p.__vector_as_arraysegment(30); }
  internal byte IndicateDuration { get { int o = __p.__offset(32); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  internal uint Duration(int j) { int o = __p.__offset(34); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  internal int DurationLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
  internal ArraySegment<byte>? GetDurationBytes() { return __p.__vector_as_arraysegment(34); }

  internal static Offset<MosaicCreationTransactionBuffer> CreateMosaicCreationTransactionBuffer(FlatBufferBuilder builder,
      uint size = 0,
      VectorOffset signatureOffset = default(VectorOffset),
      VectorOffset signerOffset = default(VectorOffset),
      ushort version = 0,
      ushort type = 0,
      VectorOffset feeOffset = default(VectorOffset),
      VectorOffset deadlineOffset = default(VectorOffset),
      VectorOffset parentIdOffset = default(VectorOffset),
      VectorOffset mosaicIdOffset = default(VectorOffset),
      byte NameLength = 0,
      byte numOptionalProperties = 0,
      byte flags = 0,
      byte divisibility = 0,
      VectorOffset mosaicNameOffset = default(VectorOffset),
      byte indicateDuration = 0,
      VectorOffset durationOffset = default(VectorOffset)) {
    builder.StartObject(16);
    MosaicCreationTransactionBuffer.AddDuration(builder, durationOffset);
    MosaicCreationTransactionBuffer.AddMosaicName(builder, mosaicNameOffset);
    MosaicCreationTransactionBuffer.AddMosaicId(builder, mosaicIdOffset);
    MosaicCreationTransactionBuffer.AddParentId(builder, parentIdOffset);
    MosaicCreationTransactionBuffer.AddDeadline(builder, deadlineOffset);
    MosaicCreationTransactionBuffer.AddFee(builder, feeOffset);
    MosaicCreationTransactionBuffer.AddSigner(builder, signerOffset);
    MosaicCreationTransactionBuffer.AddSignature(builder, signatureOffset);
    MosaicCreationTransactionBuffer.AddSize(builder, size);
    MosaicCreationTransactionBuffer.AddType(builder, type);
    MosaicCreationTransactionBuffer.AddVersion(builder, version);
    MosaicCreationTransactionBuffer.AddIndicateDuration(builder, indicateDuration);
    MosaicCreationTransactionBuffer.AddDivisibility(builder, divisibility);
    MosaicCreationTransactionBuffer.AddFlags(builder, flags);
    MosaicCreationTransactionBuffer.AddNumOptionalProperties(builder, numOptionalProperties);
    MosaicCreationTransactionBuffer.AddNameLength(builder, NameLength);
    return MosaicCreationTransactionBuffer.EndMosaicCreationTransactionBuffer(builder);
  }

  internal static void StartMosaicCreationTransactionBuffer(FlatBufferBuilder builder) { builder.StartObject(16); }
  internal static void AddSize(FlatBufferBuilder builder, uint size) { builder.AddUint(0, size, 0); }
  internal static void AddSignature(FlatBufferBuilder builder, VectorOffset signatureOffset) { builder.AddOffset(1, signatureOffset.Value, 0); }
  internal static VectorOffset CreateSignatureVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  internal static void StartSignatureVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  internal static void AddSigner(FlatBufferBuilder builder, VectorOffset signerOffset) { builder.AddOffset(2, signerOffset.Value, 0); }
  internal static VectorOffset CreateSignerVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  internal static void StartSignerVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  internal static void AddVersion(FlatBufferBuilder builder, ushort version) { builder.AddUshort(3, version, 0); }
  internal static void AddType(FlatBufferBuilder builder, ushort type) { builder.AddUshort(4, type, 0); }
  internal static void AddFee(FlatBufferBuilder builder, VectorOffset feeOffset) { builder.AddOffset(5, feeOffset.Value, 0); }
  internal static VectorOffset CreateFeeVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  internal static void StartFeeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  internal static void AddDeadline(FlatBufferBuilder builder, VectorOffset deadlineOffset) { builder.AddOffset(6, deadlineOffset.Value, 0); }
  internal static VectorOffset CreateDeadlineVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  internal static void StartDeadlineVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  internal static void AddParentId(FlatBufferBuilder builder, VectorOffset parentIdOffset) { builder.AddOffset(7, parentIdOffset.Value, 0); }
  internal static VectorOffset CreateParentIdVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  internal static void StartParentIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  internal static void AddMosaicId(FlatBufferBuilder builder, VectorOffset mosaicIdOffset) { builder.AddOffset(8, mosaicIdOffset.Value, 0); }
  internal static VectorOffset CreateMosaicIdVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  internal static void StartMosaicIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  internal static void AddNameLength(FlatBufferBuilder builder, byte NameLength) { builder.AddByte(9, NameLength, 0); }
  internal static void AddNumOptionalProperties(FlatBufferBuilder builder, byte numOptionalProperties) { builder.AddByte(10, numOptionalProperties, 0); }
  internal static void AddFlags(FlatBufferBuilder builder, byte flags) { builder.AddByte(11, flags, 0); }
  internal static void AddDivisibility(FlatBufferBuilder builder, byte divisibility) { builder.AddByte(12, divisibility, 0); }
  internal static void AddMosaicName(FlatBufferBuilder builder, VectorOffset mosaicNameOffset) { builder.AddOffset(13, mosaicNameOffset.Value, 0); }
  internal static VectorOffset CreateMosaicNameVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  internal static void StartMosaicNameVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  internal static void AddIndicateDuration(FlatBufferBuilder builder, byte indicateDuration) { builder.AddByte(14, indicateDuration, 0); }
  internal static void AddDuration(FlatBufferBuilder builder, VectorOffset durationOffset) { builder.AddOffset(15, durationOffset.Value, 0); }
  internal static VectorOffset CreateDurationVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  internal static void StartDurationVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  internal static Offset<MosaicCreationTransactionBuffer> EndMosaicCreationTransactionBuffer(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<MosaicCreationTransactionBuffer>(o);
  }
  internal static void FinishMosaicCreationTransactionBufferBuffer(FlatBufferBuilder builder, Offset<MosaicCreationTransactionBuffer> offset) { builder.Finish(offset.Value); }
};


}
