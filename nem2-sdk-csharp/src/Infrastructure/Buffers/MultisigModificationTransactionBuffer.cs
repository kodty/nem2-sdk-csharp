// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System;
using io.nem2.sdk.src.Infrastructure.Buffers.FlatBuffers;

namespace io.nem2.sdk.Infrastructure.Buffers
{
    internal struct MultisigModificationTransactionBuffer : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static MultisigModificationTransactionBuffer GetRootAsMultisigModificationTransactionBuffer(ByteBuffer _bb) { return GetRootAsMultisigModificationTransactionBuffer(_bb, new MultisigModificationTransactionBuffer()); }
  public static MultisigModificationTransactionBuffer GetRootAsMultisigModificationTransactionBuffer(ByteBuffer _bb, MultisigModificationTransactionBuffer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public MultisigModificationTransactionBuffer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Size { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public byte Signature(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int SignatureLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetSignatureBytes() { return __p.__vector_as_arraysegment(6); }
  public byte Signer(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int SignerLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetSignerBytes() { return __p.__vector_as_arraysegment(8); }
  public ushort Version { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public ushort Type { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public uint Fee(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int FeeLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetFeeBytes() { return __p.__vector_as_arraysegment(14); }
  public uint Deadline(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int DeadlineLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetDeadlineBytes() { return __p.__vector_as_arraysegment(16); }
  public byte MinRemovalDelta { get { int o = __p.__offset(18); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte MinApprovalDelta { get { int o = __p.__offset(20); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte NumModifications { get { int o = __p.__offset(22); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public CosignatoryModificationBuffer? Modifications(int j) { int o = __p.__offset(24); return o != 0 ? (CosignatoryModificationBuffer?)(new CosignatoryModificationBuffer()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ModificationsLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<MultisigModificationTransactionBuffer> CreateMultisigModificationTransactionBuffer(FlatBufferBuilder builder,
      uint size = 0,
      VectorOffset signatureOffset = default(VectorOffset),
      VectorOffset signerOffset = default(VectorOffset),
      ushort version = 0,
      ushort type = 0,
      VectorOffset feeOffset = default(VectorOffset),
      VectorOffset deadlineOffset = default(VectorOffset),
      byte minRemovalDelta = 0,
      byte minApprovalDelta = 0,
      byte numModifications = 0,
      VectorOffset modificationsOffset = default(VectorOffset)) {
    builder.StartObject(11);
    MultisigModificationTransactionBuffer.AddModifications(builder, modificationsOffset);
    MultisigModificationTransactionBuffer.AddDeadline(builder, deadlineOffset);
    MultisigModificationTransactionBuffer.AddFee(builder, feeOffset);
    MultisigModificationTransactionBuffer.AddSigner(builder, signerOffset);
    MultisigModificationTransactionBuffer.AddSignature(builder, signatureOffset);
    MultisigModificationTransactionBuffer.AddSize(builder, size);
    MultisigModificationTransactionBuffer.AddType(builder, type);
    MultisigModificationTransactionBuffer.AddVersion(builder, version);
    MultisigModificationTransactionBuffer.AddNumModifications(builder, numModifications);
    MultisigModificationTransactionBuffer.AddMinApprovalDelta(builder, minApprovalDelta);
    MultisigModificationTransactionBuffer.AddMinRemovalDelta(builder, minRemovalDelta);
    return MultisigModificationTransactionBuffer.EndMultisigModificationTransactionBuffer(builder);
  }

  public static void StartMultisigModificationTransactionBuffer(FlatBufferBuilder builder) { builder.StartObject(11); }
  public static void AddSize(FlatBufferBuilder builder, uint size) { builder.AddUint(0, size, 0); }
  public static void AddSignature(FlatBufferBuilder builder, VectorOffset signatureOffset) { builder.AddOffset(1, signatureOffset.Value, 0); }
  public static VectorOffset CreateSignatureVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static void StartSignatureVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddSigner(FlatBufferBuilder builder, VectorOffset signerOffset) { builder.AddOffset(2, signerOffset.Value, 0); }
  public static VectorOffset CreateSignerVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static void StartSignerVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddVersion(FlatBufferBuilder builder, ushort version) { builder.AddUshort(3, version, 0); }
  public static void AddType(FlatBufferBuilder builder, ushort type) { builder.AddUshort(4, type, 0); }
  public static void AddFee(FlatBufferBuilder builder, VectorOffset feeOffset) { builder.AddOffset(5, feeOffset.Value, 0); }
  public static VectorOffset CreateFeeVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static void StartFeeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDeadline(FlatBufferBuilder builder, VectorOffset deadlineOffset) { builder.AddOffset(6, deadlineOffset.Value, 0); }
  public static VectorOffset CreateDeadlineVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static void StartDeadlineVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMinRemovalDelta(FlatBufferBuilder builder, byte minRemovalDelta) { builder.AddByte(7, minRemovalDelta, 0); }
  public static void AddMinApprovalDelta(FlatBufferBuilder builder, byte minApprovalDelta) { builder.AddByte(8, minApprovalDelta, 0); }
  public static void AddNumModifications(FlatBufferBuilder builder, byte numModifications) { builder.AddByte(9, numModifications, 0); }
  public static void AddModifications(FlatBufferBuilder builder, VectorOffset modificationsOffset) { builder.AddOffset(10, modificationsOffset.Value, 0); }
  public static VectorOffset CreateModificationsVector(FlatBufferBuilder builder, Offset<CosignatoryModificationBuffer>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartModificationsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<MultisigModificationTransactionBuffer> EndMultisigModificationTransactionBuffer(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<MultisigModificationTransactionBuffer>(o);
  }
  public static void FinishMultisigModificationTransactionBufferBuffer(FlatBufferBuilder builder, Offset<MultisigModificationTransactionBuffer> offset) { builder.Finish(offset.Value); }
};


}
